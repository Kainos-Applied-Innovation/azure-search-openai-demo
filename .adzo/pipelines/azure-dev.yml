---
parameters:
  - name: azdDown
    type: boolean
    default: false
    displayName: "Destroy deployment"
# Run when commits are pushed to mainline branch (main or master)
# Set this to the mainline branch you are using
trigger:
  - main
# Azure Pipelines workflow to deploy to Azure using azd
# To configure required secrets for connecting to Azure, simply run `azd pipeline config --provider azdo`
pool:
  vmImage: ubuntu-latest
variables:
 - group: openhack
#  - name: serviceConnection
#    value: openhack-sub-2
# Use azd provided container image that has azd, infra, multi-language build tools pre-installed.
container: mcr.microsoft.com/azure-dev-cli-apps:latest
steps:
  - pwsh: |
      azd config set auth.useAzCliAuth "true"
    displayName: Configure AZD to Use AZ CLI Authentication.
  - bash: |
      set -e
      python3 -m venv scripts/.venv
    condition: and(succeeded(), ne('${{ parameters.azdDown }}', true))
    displayName: Pre-create Python venv
  - task: AzureCLI@2
    displayName: Provision Infrastructure
    condition: and(succeeded(), ne('${{ parameters.azdDown }}', true))
    inputs:
      azureSubscription: $(AZURE_SERVICE_CONNECTION)
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        set -e
        cat ".azure/$AZURE_ENV_NAME/.env" || echo "No .env file found"
        env
        azd provision --no-prompt
        env
    env:
      AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
      AZURE_ENV_NAME: $(AZURE_ENV_NAME)
      AZURE_LOCATION: $(AZURE_LOCATION)
      AZURE_BACKEND_SERVICE: $(AZURE_BACKEND_SERVICE)
      # AZURE_USER_ROLE_ASSIGNMENT: $(AZURE_USER_ROLE_ASSIGNMENT)
      AZURE_USER_IS_SERVICE_PRINCIPAL: $(AZURE_USER_IS_SERVICE_PRINCIPAL)
  - task: AzureCLI@2
    displayName: Deploy Application
    condition: and(succeeded(), ne('${{ parameters.azdDown }}', true))
    inputs:
      azureSubscription: $(AZURE_SERVICE_CONNECTION)
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        set -e
        azd deploy --no-prompt
    env:
      AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
      AZURE_ENV_NAME: $(AZURE_ENV_NAME)
      AZURE_LOCATION: $(AZURE_LOCATION)
      AZURE_BACKEND_SERVICE: $(AZURE_BACKEND_SERVICE)
      # AZURE_USER_ROLE_ASSIGNMENT: $(AZURE_USER_ROLE_ASSIGNMENT)
      AZURE_USER_IS_SERVICE_PRINCIPAL: $(AZURE_USER_IS_SERVICE_PRINCIPAL)
  - task: AzureCLI@2
    displayName: Destroy deployment
    condition: and(succeeded(), eq('${{ parameters.azdDown }}', true))
    inputs:
      azureSubscription: $(AZURE_SERVICE_CONNECTION)
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        set -e
        azd down --force --purge --no-prompt
    env:
      AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
      AZURE_ENV_NAME: $(AZURE_ENV_NAME)
      AZURE_LOCATION: $(AZURE_LOCATION)
      AZURE_BACKEND_SERVICE: $(AZURE_BACKEND_SERVICE)